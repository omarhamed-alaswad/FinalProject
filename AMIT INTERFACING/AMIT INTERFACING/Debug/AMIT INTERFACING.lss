
AMIT INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000422  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011b6  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ac  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000098d  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000204  00000000  00000000  00002a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d2  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b1  00000000  00000000  000030f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000038a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
  8a:	0c 94 0f 02 	jmp	0x41e	; 0x41e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Direction>:
 *  Author: VAIO
 */ 
#include "DIO.h"
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)
{
	switch (direction)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPin_Direction+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	c9 f1       	breq	.+114    	; 0x10c <DIO_SetPin_Direction+0x7a>
  9a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_SetPin_Direction+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPin_Direction+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_SetPin_Direction+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_SetPin_Direction+0x62>
  aa:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPin_Direction+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPin_Direction+0x22>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
			break;
  c2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPin_Direction+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPin_Direction+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
			break;
  da:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Direction+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Direction+0x52>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
			break;
  f2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPin_Direction+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPin_Direction+0x6a>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
			break;
 10a:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	89 f0       	breq	.+34     	; 0x132 <DIO_SetPin_Direction+0xa0>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_SetPin_Direction+0x8a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c9 f0       	breq	.+50     	; 0x148 <DIO_SetPin_Direction+0xb6>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <DIO_SetPin_Direction+0xcc>
 11a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0x92>
 12c:	82 2b       	or	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
			break;
 130:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xa8>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
			break;
 146:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
			break;
 15c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPin_Direction+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPin_Direction+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value)
{
	switch (value)
 174:	44 23       	and	r20, r20
 176:	19 f0       	breq	.+6      	; 0x17e <DIO_SetPin_Value+0xa>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	c9 f1       	breq	.+114    	; 0x1ee <DIO_SetPin_Value+0x7a>
 17c:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch(port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 f0       	breq	.+36     	; 0x1a6 <DIO_SetPin_Value+0x32>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPin_Value+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	d9 f0       	breq	.+54     	; 0x1be <DIO_SetPin_Value+0x4a>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_SetPin_Value+0x62>
 18c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPin_Value+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPin_Value+0x22>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
			break;
 1a4:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPin_Value+0x3e>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPin_Value+0x3a>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
			break;
 1bc:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPin_Value+0x56>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPin_Value+0x52>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	85 bb       	out	0x15, r24	; 21
			break;
 1d4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1d6:	22 b3       	in	r18, 0x12	; 18
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPin_Value+0x6e>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPin_Value+0x6a>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	82 bb       	out	0x12, r24	; 18
			break;
 1ec:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch(port)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f0       	breq	.+34     	; 0x214 <DIO_SetPin_Value+0xa0>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_SetPin_Value+0x8a>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c9 f0       	breq	.+50     	; 0x22a <DIO_SetPin_Value+0xb6>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	11 f1       	breq	.+68     	; 0x240 <DIO_SetPin_Value+0xcc>
 1fc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_Value+0x96>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_Value+0x92>
 20e:	82 2b       	or	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
			break;
 212:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_Value+0xac>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_Value+0xa8>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
			break;
 228:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPin_Value+0xc2>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPin_Value+0xbe>
 23a:	82 2b       	or	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
			break;
 23e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPin_Value+0xd8>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPin_Value+0xd4>
 250:	82 2b       	or	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LED0_Init>:
/*LED-0 Functions*/
void LED0_Init(void)
{
	/*Set LED direction as output*/
	//SET_BIT(DDRC, 2);
	DIO_SetPin_Direction(LED0_PORT, LED0_PIN, LED_OUTPUT);
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 260:	08 95       	ret

00000262 <LED0_ON>:
}
void LED0_ON(void)
{
	/*Set value in PORTC*/
	//SET_BIT(PORTC, 2);
	DIO_SetPin_Value(LED0_PORT, LED0_PIN, LED_HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 26c:	08 95       	ret

0000026e <LED0_OFF>:
}
void LED0_OFF(void)
{
	/*Clear value in PORTC*/
	//CLR_BIT(PORTC, 2);
	DIO_SetPin_Value(LED0_PORT, LED0_PIN, LED_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 278:	08 95       	ret

0000027a <main>:




int main(void){
	LED0_Init();
 27a:	0e 94 2b 01 	call	0x256	; 0x256 <LED0_Init>
	UART_Init();
 27e:	0e 94 03 02 	call	0x406	; 0x406 <UART_Init>
	SPI_Init();
 282:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SPI_Init>
	SPI_SlaveSelect(0);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SPI_SlaveSelect>
	while (1)
	{

		switch(UART_Receive())
 28c:	0e 94 0b 02 	call	0x416	; 0x416 <UART_Receive>
 290:	82 36       	cpi	r24, 0x62	; 98
 292:	01 f1       	breq	.+64     	; 0x2d4 <main+0x5a>
 294:	83 36       	cpi	r24, 0x63	; 99
 296:	09 f4       	brne	.+2      	; 0x29a <main+0x20>
 298:	56 c0       	rjmp	.+172    	; 0x346 <main+0xcc>
 29a:	81 36       	cpi	r24, 0x61	; 97
 29c:	09 f0       	breq	.+2      	; 0x2a0 <main+0x26>
 29e:	a1 c0       	rjmp	.+322    	; 0x3e2 <main+0x168>
		{
			case 'a':
			LED0_ON();
 2a0:	0e 94 31 01 	call	0x262	; 0x262 <LED0_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	81 ee       	ldi	r24, 0xE1	; 225
 2a8:	94 e0       	ldi	r25, 0x04	; 4
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x30>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x3a>
 2b4:	00 00       	nop
			_delay_ms(100);
			LED0_OFF();
 2b6:	0e 94 37 01 	call	0x26e	; 0x26e <LED0_OFF>
			SPI_Transmit('a');
 2ba:	81 e6       	ldi	r24, 0x61	; 97
 2bc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SPI_Transmit>
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	81 ee       	ldi	r24, 0xE1	; 225
 2c4:	94 e0       	ldi	r25, 0x04	; 4
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x4c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x56>
 2d0:	00 00       	nop
 2d2:	dc cf       	rjmp	.-72     	; 0x28c <main+0x12>
			_delay_ms(100);
			break;
			
			case 'b':
			LED0_ON();
 2d4:	0e 94 31 01 	call	0x262	; 0x262 <LED0_ON>
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	81 ee       	ldi	r24, 0xE1	; 225
 2dc:	94 e0       	ldi	r25, 0x04	; 4
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0x64>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x6e>
 2e8:	00 00       	nop
			_delay_ms(100);
			LED0_OFF();
 2ea:	0e 94 37 01 	call	0x26e	; 0x26e <LED0_OFF>
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	81 ee       	ldi	r24, 0xE1	; 225
 2f2:	94 e0       	ldi	r25, 0x04	; 4
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x7a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x84>
 2fe:	00 00       	nop
			_delay_ms(100);
			LED0_ON();
 300:	0e 94 31 01 	call	0x262	; 0x262 <LED0_ON>
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	81 ee       	ldi	r24, 0xE1	; 225
 308:	94 e0       	ldi	r25, 0x04	; 4
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0x90>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0x9a>
 314:	00 00       	nop
			_delay_ms(100);
			LED0_OFF();
 316:	0e 94 37 01 	call	0x26e	; 0x26e <LED0_OFF>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	81 ee       	ldi	r24, 0xE1	; 225
 31e:	94 e0       	ldi	r25, 0x04	; 4
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0xa6>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0xb0>
 32a:	00 00       	nop
			_delay_ms(100);
			SPI_Transmit('b');
 32c:	82 e6       	ldi	r24, 0x62	; 98
 32e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SPI_Transmit>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	81 ee       	ldi	r24, 0xE1	; 225
 336:	94 e0       	ldi	r25, 0x04	; 4
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0xbe>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xc8>
 342:	00 00       	nop
 344:	a3 cf       	rjmp	.-186    	; 0x28c <main+0x12>
			_delay_ms(100);
			break;
			case 'c':
			
			LED0_ON();
 346:	0e 94 31 01 	call	0x262	; 0x262 <LED0_ON>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	81 ee       	ldi	r24, 0xE1	; 225
 34e:	94 e0       	ldi	r25, 0x04	; 4
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0xd6>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0xe0>
 35a:	00 00       	nop
			_delay_ms(100);
			LED0_OFF();
 35c:	0e 94 37 01 	call	0x26e	; 0x26e <LED0_OFF>
 360:	2f ef       	ldi	r18, 0xFF	; 255
 362:	81 ee       	ldi	r24, 0xE1	; 225
 364:	94 e0       	ldi	r25, 0x04	; 4
 366:	21 50       	subi	r18, 0x01	; 1
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <main+0xec>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0xf6>
 370:	00 00       	nop
			_delay_ms(100);
			LED0_ON();
 372:	0e 94 31 01 	call	0x262	; 0x262 <LED0_ON>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	81 ee       	ldi	r24, 0xE1	; 225
 37a:	94 e0       	ldi	r25, 0x04	; 4
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0x102>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x10c>
 386:	00 00       	nop
			_delay_ms(100);
			LED0_OFF();
 388:	0e 94 37 01 	call	0x26e	; 0x26e <LED0_OFF>
 38c:	2f ef       	ldi	r18, 0xFF	; 255
 38e:	81 ee       	ldi	r24, 0xE1	; 225
 390:	94 e0       	ldi	r25, 0x04	; 4
 392:	21 50       	subi	r18, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0x118>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x122>
 39c:	00 00       	nop
			_delay_ms(100);
			LED0_ON();
 39e:	0e 94 31 01 	call	0x262	; 0x262 <LED0_ON>
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	81 ee       	ldi	r24, 0xE1	; 225
 3a6:	94 e0       	ldi	r25, 0x04	; 4
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0x12e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x138>
 3b2:	00 00       	nop
			_delay_ms(100);
			LED0_OFF();
 3b4:	0e 94 37 01 	call	0x26e	; 0x26e <LED0_OFF>
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	81 ee       	ldi	r24, 0xE1	; 225
 3bc:	94 e0       	ldi	r25, 0x04	; 4
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x144>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x14e>
 3c8:	00 00       	nop
			_delay_ms(100);
			SPI_Transmit('c');	
 3ca:	83 e6       	ldi	r24, 0x63	; 99
 3cc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SPI_Transmit>
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	81 ee       	ldi	r24, 0xE1	; 225
 3d4:	94 e0       	ldi	r25, 0x04	; 4
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x15c>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x166>
 3e0:	00 00       	nop
			_delay_ms(100);	
			default:
			LED0_OFF();
 3e2:	0e 94 37 01 	call	0x26e	; 0x26e <LED0_OFF>
			break;	
 3e6:	52 cf       	rjmp	.-348    	; 0x28c <main+0x12>

000003e8 <SPI_Init>:
}
Uint8t SPI_Receive(void)
{
	while (GET_BIT(SPSR, SPIF) != 1);
	return SPDR;
}
 3e8:	bd 9a       	sbi	0x17, 5	; 23
 3ea:	be 98       	cbi	0x17, 6	; 23
 3ec:	bf 9a       	sbi	0x17, 7	; 23
 3ee:	bc 9a       	sbi	0x17, 4	; 23
 3f0:	83 e5       	ldi	r24, 0x53	; 83
 3f2:	8d b9       	out	0x0d, r24	; 13
 3f4:	08 95       	ret

000003f6 <SPI_Transmit>:
 3f6:	8f b9       	out	0x0f, r24	; 15
 3f8:	77 9b       	sbis	0x0e, 7	; 14
 3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <SPI_Transmit+0x2>
 3fc:	08 95       	ret

000003fe <SPI_SlaveSelect>:
void SPI_SlaveSelect(Uint8t slave)
{
	switch (slave)
 3fe:	81 11       	cpse	r24, r1
 400:	01 c0       	rjmp	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		case 0:
		CLR_BIT(PORTB, SS);
 402:	c4 98       	cbi	0x18, 4	; 24
 404:	08 95       	ret

00000406 <UART_Init>:

void UART_Transmit(Uint8t data)
{
	UDR = data;
	while (GET_BIT(UCSRA, TXC) != 1);
}
 406:	88 e1       	ldi	r24, 0x18	; 24
 408:	8a b9       	out	0x0a, r24	; 10
 40a:	86 e8       	ldi	r24, 0x86	; 134
 40c:	80 bd       	out	0x20, r24	; 32
 40e:	87 e6       	ldi	r24, 0x67	; 103
 410:	89 b9       	out	0x09, r24	; 9
 412:	10 bc       	out	0x20, r1	; 32
 414:	08 95       	ret

00000416 <UART_Receive>:
Uint8t UART_Receive(void)
{
	while (GET_BIT(UCSRA, RXC) != 1);
 416:	5f 9b       	sbis	0x0b, 7	; 11
 418:	fe cf       	rjmp	.-4      	; 0x416 <UART_Receive>
	return UDR;
 41a:	8c b1       	in	r24, 0x0c	; 12
}
 41c:	08 95       	ret

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
